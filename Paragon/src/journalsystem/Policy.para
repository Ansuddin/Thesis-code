public class Policy {


	// Confidentiality
	private static final Object lowObserver = new Object();
	private static final Object highObserver = new Object();

	public static final policy low = { highObserver: ;lowObserver: };
	public static final policy medium = {highObserver:};
	public static final policy high = {(Doctor d, PatientJournal p)  highObserver: Locks.IsReferred(d,p) };



	// Integrity
	private static final Object untrustedObserver = new Object();
	private static final Object trustedObserver = new Object();

	public static final policy untrusted = { untrustedObserver : };
	public static final policy trusted = { untrustedObserver : 
									 ; trustedObserver : };




	// Another Confidentiality variant
	//public static final policy lowD = { Object x: };
	//public static final policy mediumD = { Object x: Locks.IsDoctor};
	//public static final policy highD = {(Doctor d, PatientJournal p)  Object x : Locks.IsReferred(d,p), Locks.IsDoctor };


	// Another variant with actors and declassification locks

	// Declassification lock
	private lock declassify;
	
	public static final policy lowD = { Doctor d:; Secretary s:; Object x: declassify };
	public static final policy mediumD = { Doctor d:; Object x: declassify};
	public static final policy highD = { Doctor d: Locks.IsReferred(d); Object x : declassify };


	!untrusted public static ?TO <policy TO,A> A declassifyLow(?(TO*lowD) A x){
		open declassify {
			return x;
		}
	}

	~Locks.IsDoctor
	!trusted public static ?TO <policy TO,A> A declassifyMedium(?(TO*mediumD) A x){
		open declassify {
			return x;
		}
	}

	~Locks.IsDoctor ~Locks.Referred
	!trusted public static ?TO <policy TO, A> A declassifyHigh(?(TO*highD) A x){
		open declassify {
			return x;
			
		}
	}

}